<?php
/**
 * TransferServiceAvail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transfer Booking API
 *
 * # APItude Transfer Booking API  APItude also includes now the ability to book transfers. This API will provide you with availability for transfer services and allow you to distribute those not only through the websites but also is thought to support mobile and tablets.  APItude for transfers API is designed to provide Hotelbeds Group clients with a set of API calls to:   * Enable the construction or creation of a complete transfer website or mobile application (app) * Integrate transfer services into existing systems both internal and external. * Integrate transfers contents for transfers into a common CMS for all the products being distributed.  **Transfer Booking API** provides all the needed calls (operations) to develop your booking funnel, confirm a booking and obtain the relevant information for a customer to enjoy the transfer service that he or she bought.  To obtain and cache the static content you can use [Transfers Cache API](), an API designed to return all the static information needed to operate the Transfers BookingAPI as quickly and simple as possible.
 *
 * OpenAPI spec version: 1.0
 * Contact: integrations.btb@hotelbeds.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TransferServiceAvail Class Doc Comment
 *
 * @category Class
 * @description The Transfer Service superclass
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransferServiceAvail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransferServiceAvail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cancellation_policies' => '\Swagger\Client\Model\CancellationPolicy[]',
'category' => '\Swagger\Client\Model\Category',
'content' => '\Swagger\Client\Model\TransferServiceContent',
'direction' => 'string',
'factsheet_id' => 'int',
'id' => 'int',
'links' => '\Swagger\Client\Model\Link[]',
'max_pax_capacity' => 'int',
'min_pax_capacity' => 'int',
'pickup_information' => '\Swagger\Client\Model\PickupInformation',
'price' => '\Swagger\Client\Model\Price',
'rate_key' => 'string',
'transfer_type' => 'string',
'vehicle' => '\Swagger\Client\Model\Vehicle'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cancellation_policies' => null,
'category' => null,
'content' => null,
'direction' => null,
'factsheet_id' => 'int32',
'id' => 'int32',
'links' => null,
'max_pax_capacity' => 'int32',
'min_pax_capacity' => 'int32',
'pickup_information' => null,
'price' => null,
'rate_key' => null,
'transfer_type' => null,
'vehicle' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes(): array
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats(): array
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cancellation_policies' => 'cancellationPolicies',
'category' => 'category',
'content' => 'content',
'direction' => 'direction',
'factsheet_id' => 'factsheetId',
'id' => 'id',
'links' => 'links',
'max_pax_capacity' => 'maxPaxCapacity',
'min_pax_capacity' => 'minPaxCapacity',
'pickup_information' => 'pickupInformation',
'price' => 'price',
'rate_key' => 'rateKey',
'transfer_type' => 'transferType',
'vehicle' => 'vehicle'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cancellation_policies' => 'setCancellationPolicies',
'category' => 'setCategory',
'content' => 'setContent',
'direction' => 'setDirection',
'factsheet_id' => 'setFactsheetId',
'id' => 'setId',
'links' => 'setLinks',
'max_pax_capacity' => 'setMaxPaxCapacity',
'min_pax_capacity' => 'setMinPaxCapacity',
'pickup_information' => 'setPickupInformation',
'price' => 'setPrice',
'rate_key' => 'setRateKey',
'transfer_type' => 'setTransferType',
'vehicle' => 'setVehicle'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cancellation_policies' => 'getCancellationPolicies',
'category' => 'getCategory',
'content' => 'getContent',
'direction' => 'getDirection',
'factsheet_id' => 'getFactsheetId',
'id' => 'getId',
'links' => 'getLinks',
'max_pax_capacity' => 'getMaxPaxCapacity',
'min_pax_capacity' => 'getMinPaxCapacity',
'pickup_information' => 'getPickupInformation',
'price' => 'getPrice',
'rate_key' => 'getRateKey',
'transfer_type' => 'getTransferType',
'vehicle' => 'getVehicle'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$swaggerModelName;
    }

    const DIRECTION_DEPARTURE = 'DEPARTURE';
const DIRECTION__RETURN = 'RETURN';
const TRANSFER_TYPE__PRIVATE = 'PRIVATE';
const TRANSFER_TYPE_SHARED = 'SHARED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectionAllowableValues(): array
    {
        return [
            self::DIRECTION_DEPARTURE,
self::DIRECTION__RETURN,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransferTypeAllowableValues(): array
    {
        return [
            self::TRANSFER_TYPE__PRIVATE,
self::TRANSFER_TYPE_SHARED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cancellation_policies'] = isset($data['cancellation_policies']) ? $data['cancellation_policies'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : null;
        $this->container['factsheet_id'] = isset($data['factsheet_id']) ? $data['factsheet_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['max_pax_capacity'] = isset($data['max_pax_capacity']) ? $data['max_pax_capacity'] : null;
        $this->container['min_pax_capacity'] = isset($data['min_pax_capacity']) ? $data['min_pax_capacity'] : null;
        $this->container['pickup_information'] = isset($data['pickup_information']) ? $data['pickup_information'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['rate_key'] = isset($data['rate_key']) ? $data['rate_key'] : null;
        $this->container['transfer_type'] = isset($data['transfer_type']) ? $data['transfer_type'] : null;
        $this->container['vehicle'] = isset($data['vehicle']) ? $data['vehicle'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['cancellation_policies'] === null) {
            $invalidProperties[] = "'cancellation_policies' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        if ($this->container['direction'] === null) {
            $invalidProperties[] = "'direction' can't be null";
        }
        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($this->container['direction']) && !in_array($this->container['direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'direction', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['max_pax_capacity'] === null) {
            $invalidProperties[] = "'max_pax_capacity' can't be null";
        }
        if ($this->container['min_pax_capacity'] === null) {
            $invalidProperties[] = "'min_pax_capacity' can't be null";
        }
        if ($this->container['pickup_information'] === null) {
            $invalidProperties[] = "'pickup_information' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['rate_key'] === null) {
            $invalidProperties[] = "'rate_key' can't be null";
        }
        if ($this->container['transfer_type'] === null) {
            $invalidProperties[] = "'transfer_type' can't be null";
        }
        $allowedValues = $this->getTransferTypeAllowableValues();
        if (!is_null($this->container['transfer_type']) && !in_array($this->container['transfer_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transfer_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['vehicle'] === null) {
            $invalidProperties[] = "'vehicle' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cancellation_policies
     *
     * @return \Swagger\Client\Model\CancellationPolicy[]
     */
    public function getCancellationPolicies(): array
    {
        return $this->container['cancellation_policies'];
    }

    /**
     * Sets cancellation_policies
     *
     * @param \Swagger\Client\Model\CancellationPolicy[] $cancellation_policies Cancellation policies
     *
     * @return $this
     */
    public function setCancellationPolicies($cancellation_policies): static
    {
        $this->container['cancellation_policies'] = $cancellation_policies;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \Swagger\Client\Model\Category
     */
    public function getCategory(): Category
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \Swagger\Client\Model\Category $category category
     *
     * @return $this
     */
    public function setCategory($category): static
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets content
     *
     * @return \Swagger\Client\Model\TransferServiceContent
     */
    public function getContent(): TransferServiceContent
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param \Swagger\Client\Model\TransferServiceContent $content content
     *
     * @return $this
     */
    public function setContent($content): static
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string
     */
    public function getDirection(): string
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string $direction Transfer Direction
     *
     * @return $this
     */
    public function setDirection($direction): static
    {
        $allowedValues = $this->getDirectionAllowableValues();
        if (!in_array($direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'direction', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets factsheet_id
     *
     * @return int
     */
    public function getFactsheetId(): int
    {
        return $this->container['factsheet_id'];
    }

    /**
     * Sets factsheet_id
     *
     * @param int $factsheet_id FactsheetId
     *
     * @return $this
     */
    public function setFactsheetId($factsheet_id): static
    {
        $this->container['factsheet_id'] = $factsheet_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Id
     *
     * @return $this
     */
    public function setId($id): static
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\Link[]
     */
    public function getLinks(): array
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\Link[] $links Links
     *
     * @return $this
     */
    public function setLinks($links): static
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets max_pax_capacity
     *
     * @return int
     */
    public function getMaxPaxCapacity(): int
    {
        return $this->container['max_pax_capacity'];
    }

    /**
     * Sets max_pax_capacity
     *
     * @param int $max_pax_capacity Max capacity
     *
     * @return $this
     */
    public function setMaxPaxCapacity($max_pax_capacity): static
    {
        $this->container['max_pax_capacity'] = $max_pax_capacity;

        return $this;
    }

    /**
     * Gets min_pax_capacity
     *
     * @return int
     */
    public function getMinPaxCapacity(): int
    {
        return $this->container['min_pax_capacity'];
    }

    /**
     * Sets min_pax_capacity
     *
     * @param int $min_pax_capacity Min capacity
     *
     * @return $this
     */
    public function setMinPaxCapacity($min_pax_capacity): static
    {
        $this->container['min_pax_capacity'] = $min_pax_capacity;

        return $this;
    }

    /**
     * Gets pickup_information
     *
     * @return \Swagger\Client\Model\PickupInformation
     */
    public function getPickupInformation(): PickupInformation
    {
        return $this->container['pickup_information'];
    }

    /**
     * Sets pickup_information
     *
     * @param \Swagger\Client\Model\PickupInformation $pickup_information pickup_information
     *
     * @return $this
     */
    public function setPickupInformation($pickup_information): static
    {
        $this->container['pickup_information'] = $pickup_information;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \Swagger\Client\Model\Price
     */
    public function getPrice(): Price
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \Swagger\Client\Model\Price $price price
     *
     * @return $this
     */
    public function setPrice($price): static
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets rate_key
     *
     * @return string
     */
    public function getRateKey(): string
    {
        return $this->container['rate_key'];
    }

    /**
     * Sets rate_key
     *
     * @param string $rate_key Rate key
     *
     * @return $this
     */
    public function setRateKey($rate_key): static
    {
        $this->container['rate_key'] = $rate_key;

        return $this;
    }

    /**
     * Gets transfer_type
     *
     * @return string
     */
    public function getTransferType(): string
    {
        return $this->container['transfer_type'];
    }

    /**
     * Sets transfer_type
     *
     * @param string $transfer_type Transfer Type
     *
     * @return $this
     */
    public function setTransferType($transfer_type): static
    {
        $allowedValues = $this->getTransferTypeAllowableValues();
        if (!in_array($transfer_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transfer_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transfer_type'] = $transfer_type;

        return $this;
    }

    /**
     * Gets vehicle
     *
     * @return \Swagger\Client\Model\Vehicle
     */
    public function getVehicle(): Vehicle
    {
        return $this->container['vehicle'];
    }

    /**
     * Sets vehicle
     *
     * @param \Swagger\Client\Model\Vehicle $vehicle vehicle
     *
     * @return $this
     */
    public function setVehicle($vehicle): static
    {
        $this->container['vehicle'] = $vehicle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
