<?php
/**
 * TransferConfirm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transfer Booking API
 *
 * # APItude Transfer Booking API  APItude also includes now the ability to book transfers. This API will provide you with availability for transfer services and allow you to distribute those not only through the websites but also is thought to support mobile and tablets.  APItude for transfers API is designed to provide Hotelbeds Group clients with a set of API calls to:   * Enable the construction or creation of a complete transfer website or mobile application (app) * Integrate transfer services into existing systems both internal and external. * Integrate transfers contents for transfers into a common CMS for all the products being distributed.  **Transfer Booking API** provides all the needed calls (operations) to develop your booking funnel, confirm a booking and obtain the relevant information for a customer to enjoy the transfer service that he or she bought.  To obtain and cache the static content you can use [Transfers Cache API](), an API designed to return all the static information needed to operate the Transfers BookingAPI as quickly and simple as possible.
 *
 * OpenAPI spec version: 1.0
 * Contact: integrations.btb@hotelbeds.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TransferConfirm Class Doc Comment
 *
 * @category Class
 * @description The Transfer Confirm Object
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransferConfirm implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransferConfirm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'detail' => '\Swagger\Client\Model\Detail',
'dropoff_information' => '\Swagger\Client\Model\DropoffInformation',
'pickup_information' => '\Swagger\Client\Model\ConfirmPickupInformation',
'rate_key' => 'string',
'transfer_details' => '\Swagger\Client\Model\TransferDetail[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'detail' => null,
'dropoff_information' => null,
'pickup_information' => null,
'rate_key' => null,
'transfer_details' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes(): array
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats(): array
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'detail' => 'detail',
'dropoff_information' => 'dropoffInformation',
'pickup_information' => 'pickupInformation',
'rate_key' => 'rateKey',
'transfer_details' => 'transferDetails'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'detail' => 'setDetail',
'dropoff_information' => 'setDropoffInformation',
'pickup_information' => 'setPickupInformation',
'rate_key' => 'setRateKey',
'transfer_details' => 'setTransferDetails'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'detail' => 'getDetail',
'dropoff_information' => 'getDropoffInformation',
'pickup_information' => 'getPickupInformation',
'rate_key' => 'getRateKey',
'transfer_details' => 'getTransferDetails'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['detail'] = isset($data['detail']) ? $data['detail'] : null;
        $this->container['dropoff_information'] = isset($data['dropoff_information']) ? $data['dropoff_information'] : null;
        $this->container['pickup_information'] = isset($data['pickup_information']) ? $data['pickup_information'] : null;
        $this->container['rate_key'] = isset($data['rate_key']) ? $data['rate_key'] : null;
        $this->container['transfer_details'] = isset($data['transfer_details']) ? $data['transfer_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['rate_key'] === null) {
            $invalidProperties[] = "'rate_key' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets detail
     *
     * @return ?\Swagger\Client\Model\Detail
     */
    public function getDetail(): ?Detail
    {
        return $this->container['detail'];
    }

    /**
     * Sets detail
     *
     * @param \Swagger\Client\Model\Detail $detail detail
     *
     * @return $this
     */
    public function setDetail($detail): static
    {
        $this->container['detail'] = $detail;

        return $this;
    }

    /**
     * Gets dropoff_information
     *
     * @return ?\Swagger\Client\Model\DropoffInformation
     */
    public function getDropoffInformation(): ?DropoffInformation
    {
        return $this->container['dropoff_information'];
    }

    /**
     * Sets dropoff_information
     *
     * @param \Swagger\Client\Model\DropoffInformation $dropoff_information dropoff_information
     *
     * @return $this
     */
    public function setDropoffInformation($dropoff_information): static
    {
        $this->container['dropoff_information'] = $dropoff_information;

        return $this;
    }

    /**
     * Gets pickup_information
     *
     * @return ?\Swagger\Client\Model\ConfirmPickupInformation
     */
    public function getPickupInformation(): ?ConfirmPickupInformation
    {
        return $this->container['pickup_information'];
    }

    /**
     * Sets pickup_information
     *
     * @param \Swagger\Client\Model\ConfirmPickupInformation $pickup_information pickup_information
     *
     * @return $this
     */
    public function setPickupInformation($pickup_information): static
    {
        $this->container['pickup_information'] = $pickup_information;

        return $this;
    }

    /**
     * Gets rate_key
     *
     * @return ?string
     */
    public function getRateKey(): ?string
    {
        return $this->container['rate_key'];
    }

    /**
     * Sets rate_key
     *
     * @param string $rate_key rate key
     *
     * @return $this
     */
    public function setRateKey($rate_key): static
    {
        $this->container['rate_key'] = $rate_key;

        return $this;
    }

    /**
     * Gets transfer_details
     *
     * @return ?\Swagger\Client\Model\TransferDetail[]
     */
    public function getTransferDetails(): ?array
    {
        return $this->container['transfer_details'];
    }

    /**
     * Sets transfer_details
     *
     * @param \Swagger\Client\Model\TransferDetail[] $transfer_details transfer details
     *
     * @return $this
     */
    public function setTransferDetails($transfer_details): static
    {
        $this->container['transfer_details'] = $transfer_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
